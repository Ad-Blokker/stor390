Exploratory Data Analysis
========================================================
author: STOR 390
date: 1/31/17
autosize: true

Load data
========================================================
```{r, message=FALSE, warning=F}
library(tidyverse)
data <- read_csv(url("http://ryanthornburg.com/wp-content/uploads/2015/05/UNC_Salares_NandO_2015-05-06.csv"))
```

EDA is an iterative cycle
========================================================
1. Generate questions about your data.

2. Search for answers by visualizing, transforming, and modelling your data.

3. Use what you learn to refine your questions and/or generate new questions.


Ask lots of questions
========================================================
> EDA is fundamentally a creative process. And like most creative processes, the key to asking quality questions is to generate a large quantity of questions.

Things to look for
========================================================
- modes/clusters
- outliers
- the unexpected
- any kind of pattern



Two categories of questions
========================================================
- variation
- covariation


Definitions
========================================================
- variable (column)
- observation (row)
- tabluar data (matrix)
- value (entry )


Summary statistics: location vs. range
========================================================
```{r}
median(data$totalsal)
max(data$totalsal)
```


Plot one variable
========================================================

```{r}
# plot each data point
ggplot(data=data) +
    geom_point(aes(x=totalsal, y=0)) +
    ylim(-10, 10)
```

Jitter plots
========================================================
```{r}
# same plot as above but with random y values
ggplot(data=data) +
    geom_jitter(aes(x=totalsal, y=0)) +
    ylim(-10, 10)
```


Boxplots
========================================================
```{r}
ggplot(data=data) +
    geom_boxplot(aes(x=0, y=totalsal))
```

Histograms
========================================================
```{r}
ggplot(data=data) +
    geom_histogram(aes(x=totalsal), bins = 30)
```

Too many bins
========================================================
```{r}
ggplot(data=data) +
    geom_histogram(aes(x=totalsal), bins = 10000)
```

Too few bins
========================================================
```{r}
ggplot(data=data) +
    geom_histogram(aes(x=totalsal), bins = 2)
```

Just right (maybe?)
========================================================
```{r}
ggplot(data=data) +
    geom_histogram(aes(x=totalsal), bins = 100)
```

Multimodal
========================================================
![](multimodal.png)


Gaussian mixture with two modes
========================================================
```{r}
set.seed(342)
mix <- tibble(val=c(rnorm(n=4000, mean=0, sd=1), 
                  rnorm(n=4000, mean=2.5, sd=1)))

```

Wide binwidth misses the modes
========================================================
```{r}
# wide binwidth
ggplot(data=mix) +
    geom_histogram(aes(x=val), bins = 10)
```

moderate binwidth: kind of see two modes
========================================================
```{r}
# moderate binwidth
ggplot(data=mix) +
    geom_histogram(aes(x=val), bins = 30)
```

Small binwidth: false modes appear
========================================================
```{r}
# small binwidth
ggplot(data=mix) +
    geom_histogram(aes(x=val), bins = 2000)
```


kernel density estimate
========================================================
```{r}
# geom_density with its default values
ggplot(data=data) +
    geom_density(aes(x=totalsal), kernel="gaussian", adjust=1)
```

KDE warning
========================================================
- a KDE is a continuous version of a histogram
- it has one (or more) parameters that need to be set
**Warning: always be wary of "smart defaults". No one default value will work well in every (or even a majority of) situations.**

KDE with fat window
========================================================
```{r}
# geom_density with a fat window
ggplot(data=data) +
    geom_density(aes(x=totalsal), kernel="gaussian", adjust=10)
```

KDE with skinny window
========================================================
```{r}
# geom_density with a skinny window
ggplot(data=data) +
    geom_density(aes(x=totalsal), kernel="gaussian", adjust=.1)
```


Best practice: combine hist (or KDE) with points
========================================================
```{r, echo=F}
ggplot(data=data) +
    geom_histogram(aes(x=totalsal), bins=100) +
    geom_point(aes(x=totalsal, y=0), shape='|', color='red') # use vertical points or jitter
```

Covariation
========================================================
- visualize relationship between two variables
- can do three or more but becomes tenuous



Scatter plot is the most visualization of covariation
========================================================
```{r}
ggplot(data=data) +
    geom_point(aes(x=age, y=totalsal)) 
```


Correlations is the most simple summary of covariation
========================================================
```{r}
cor(data$age, data$totalsal)
```


Bar plot
========================================================
```{r}
data %>% 
    filter(dept %in% c("Pediatrics", "Orthodontics" , 'Ophthalmology')) %>%
    group_by(dept) %>%
    summarise(mean_sal = mean(totalsal)) %>%
    ggplot() +
    geom_bar(aes(x=dept, y=mean_sal), stat='identity')

```

Box plots
========================================================
```{r}
data %>% 
    filter(dept %in% c("Pediatrics", "Orthodontics" , 'Ophthalmology')) %>%
    ggplot() +
    geom_boxplot(aes(x=dept, y=totalsal)) + 
    coord_flip() # max the labels horizontal so people can read them!
```

Clusters!
========================================================
```{r}
ggplot(data = faithful) + 
  geom_point(mapping = aes(x = eruptions, y = waiting))
```


Add color
========================================================
```{r}
ggplot(data=data) +
    geom_point(aes(x=age, y=totalsal, color=status)) 
```



